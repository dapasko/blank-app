import streamlit as st
import pandas as pd
import plotly.express as px
import io
from openpyxl.utils import get_column_letter
import json
import os
from datetime import datetime
from typing import List
def hash_dataframe(df):
    """–•—ç—à–∏—Ä—É–µ—Ç DataFrame –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ @st.cache_data"""
    return pd.util.hash_pandas_object(df).sum()

# –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ mapping.json –ª–µ–∂–∏—Ç —Ä—è–¥–æ–º —Å —ç—Ç–∏–º —Ñ–∞–π–ª–æ–º
here = os.path.dirname(__file__)
with open(os.path.join(here, "mapping.json"), "r", encoding="utf-8") as f:
    VARIANT_TO_SYSTEM = json.load(f)

CHANNEL_MAPPING = {
    "–í—Ö–æ–¥—è—â–∏–µ –∑–≤–æ–Ω–∫–∏": ["–í—Ö–æ–¥—è—â–∏–µ –∑–≤–æ–Ω–∫–∏"],
    "–û—Ñ—Ñ–ª–∞–π–Ω —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª": ["–†–∞–±–æ—Ç–∞", "–î–µ–∂—É—Ä—Å—Ç–≤–æ", "–ü–∏—Å—å–º–∞"],
    "–û—Ç—Ä–∞–±–æ—Ç–∫–∏-–î–æ–ø —Ä–∞–±–æ—á–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã": ["–î–æ–ø —Ä–∞–±–æ—á–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã", "–û—Ç—Ä–∞–±–æ—Ç–∫–∞"],
    "–ß–∞—Ç—ã": ["–ß–∞—Ç"],
    "–ü–µ—Ä–µ—Ä—ã–≤—ã": ["–°–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è", "–û–±–µ–¥", "–ü–µ—Ä–µ—Ä—ã–≤"],
    "–û—Ç–ø—É—Å–∫": ["–û—Ç–ø—É—Å–∫", "–£—á–µ–±–Ω—ã–π –æ—Ç–ø—É—Å–∫"],
    "–ë–æ–ª—å–Ω–∏—á–Ω—ã–π" : ["–ë–æ–ª—å–Ω–∏—á–Ω—ã–π"]
}

def inject_custom_css():
    """
    –í–Ω–µ–¥—Ä—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å—Ç–∏–ª–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Streamlit.
    –£–ª—É—á—à–∞–µ—Ç –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å –ø–æ–º–æ—â—å—é CSS.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ü–≤–µ—Ç–∞ –∏–∑ —Ç–µ–∫—É—â–µ–π —Ç–µ–º—ã Streamlit (light/dark).
    """
    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø —Ç–µ–º—ã: 'light' –∏–ª–∏ 'dark'
    theme_type = st.context.theme.type

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–º—ã
    if theme_type == "light":
        background = "#FFFFFF"     # –±–µ–ª—ã–π —Ñ–æ–Ω
        text_color = "#000000"     # —á—ë—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
    else:
        background = "#1E1E1E"     # —Ç—ë–º–Ω—ã–π —Ñ–æ–Ω
        text_color = "#FFFFFF"     # –±–µ–ª—ã–π —Ç–µ–∫—Å—Ç

    primary_color = "#3498db"      # –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–≤–µ—Ç (–º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º)

    # –í–Ω–µ–¥—Ä—è–µ–º CSS
    st.markdown(f"""
        <style>
            :root {{
                --bg-color: {background};
                --text-color: {text_color};
                --primary-color: {primary_color};
            }}

            /* –ê–Ω–∏–º–∞—Ü–∏–∏ */
            @keyframes fadeIn {{
                0% {{ opacity: 0; transform: translateY(10px); }}
                100% {{ opacity: 1; transform: translateY(0); }}
            }}

            /* –û—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã */
            .stApp {{
                background: var(--bg-color);
                color: var(--text-color);
                animation: fadeIn 0.5s ease-in;
            }}

            /* –ó–∞–≥–æ–ª–æ–≤–∫–∏ */
            h1 {{
                color: var(--primary-color);
                border-bottom: 3px solid var(--primary-color);
                padding-bottom: 0.5rem;
                margin-bottom: 1.5rem !important;
            }}

            /* –ö–∞—Ä—Ç–æ—á–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ */
            .filter-card {{
                background: white;
                border-radius: 12px;
                padding: 1.5rem;
                box-shadow: 0 4px 6px -1px rgba(0,0,0,0.05);
                margin-bottom: 1.5rem;
            }}

            /* –ö–Ω–æ–ø–∫–∏ */
            .stButton>button {{
                transition: all 0.3s ease;
                border: 2px solid var(--primary-color) !important;
            }}
            .stButton>button:hover {{
                transform: translateY(-2px);
                box-shadow: 0 7px 14px rgba(52,152,219,0.2);
            }}

            /* –ò–∫–æ–Ω–∫–∏ */
            .material-icons {{
                vertical-align: middle;
                margin-right: 5px;
            }}
        </style>
    """, unsafe_allow_html=True)

def filter_data(df_act, selected_variants, selected_main_acts):
    """
    –§–∏–ª—å—Ç—Ä—É–µ—Ç DataFrame –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –≥—Ä—É–ø–ø–∞–º –Ω–∞–≤—ã–∫–æ–≤ –∏ —Ç–∏–ø–∞–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.

    Args:
        df_act (pd.DataFrame): –ò—Å—Ö–æ–¥–Ω—ã–π DataFrame –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        selected_variants (list[str]): –°–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø –Ω–∞–≤—ã–∫–æ–≤
        selected_main_acts (list[str]): –°–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏

    Returns:
        pd.DataFrame: –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π DataFrame
    """
    return df_act[
        df_act['skill_variant'].isin(selected_variants) &
        df_act['main_act'].isin(selected_main_acts)
    ]

def process_forecast(forecast_file, selected_system_groups, selected_channels, selected_forecast_col):
    """
       –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑–∞: –∑–∞–≥—Ä—É–∂–∞–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç df_forecast

    Args:
        forecast_file (io.BytesIO): –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–æ–≥–Ω–æ–∑–∞
        selected_system_groups (list[str]): –°–∏—Å—Ç–µ–º–Ω—ã–µ –≥—Ä—É–ø–ø—ã, –ø–æ –∫–æ—Ç–æ—Ä—ã–º —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç—Å—è –ø—Ä–æ–≥–Ω–æ–∑
        selected_channels (list[str]): –ö–∞–Ω–∞–ª—ã –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        selected_forecast_col (str): –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ü—Ä–æ–≥–Ω–æ–∑ Raw')

    Returns:
        pd.DataFrame: –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π DataFrame –ø—Ä–æ–≥–Ω–æ–∑–∞
    """
    df_forecast = load_forecast(forecast_file)

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞: —Ñ–∞–π–ª –ø—Ä–æ–≥–Ω–æ–∑–∞ –∑–∞–≥—Ä—É–∂–µ–Ω, –Ω–æ –ø—É—Å—Ç–æ–π ---
    if forecast_file is not None and df_forecast.empty:
        st.warning("‚ö†Ô∏è –§–∞–π–ª –ø—Ä–æ–≥–Ω–æ–∑–∞ –∑–∞–≥—Ä—É–∂–µ–Ω, –Ω–æ –æ–Ω –ø—É—Å—Ç–æ–π –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        st.markdown("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞.")

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞: –ø—Ä–æ–≥–Ω–æ–∑ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∫–æ–ª–æ–Ω–∫—É –ø—Ä–æ–≥–Ω–æ–∑–∞ ---
    if forecast_file is None and selected_forecast_col:
        st.info("‚ÑπÔ∏è –§–∞–π–ª –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –ü—Ä–æ–≥–Ω–æ–∑ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂—ë–Ω.")
        st.markdown("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.")

    if not df_forecast.empty:
        df_forecast = df_forecast[
            df_forecast['system_group'].isin(selected_system_groups) &
            df_forecast['–ö–∞–Ω–∞–ª –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏'].isin(selected_channels)
        ]

        # –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—É—é –∫–æ–ª–æ–Ω–∫—É –ø—Ä–æ–≥–Ω–æ–∑–∞
        df_forecast = df_forecast[[
            '–î–∞—Ç–∞', '–í—Ä–µ–º—è', 'system_group', '–ö–∞–Ω–∞–ª –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏', selected_forecast_col
        ]].rename(columns={selected_forecast_col: '–ü—Ä–æ–≥–Ω–æ–∑'})

    return df_forecast

def render_filters(df_act):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.

    –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å:
    - –ö–æ–ª–æ–Ω–∫—É –ø—Ä–æ–≥–Ω–æ–∑–∞
    - –ì—Ä—É–ø–ø—ã –Ω–∞–≤—ã–∫–æ–≤
    - –ö–∞–Ω–∞–ª—ã –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏

    Args:
        df_act (pd.DataFrame): DataFrame –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≥—Ä—É–ø–ø

    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏:
            - selected_forecast_col (str): –í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞
            - selected_variants (list[str]): –í—ã–±—Ä–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã –Ω–∞–≤—ã–∫–æ–≤
            - selected_channels (list[str]): –í—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏
            - selected_main_acts (list[str]): –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–∞–Ω–∞–ª–∞–º
    """
    with st.sidebar.expander("üîÆ **–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏**", expanded=True):
        # –§–∏–ª—å—Ç—Ä –≤–µ—Ä—Å–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞
        forecast_columns = ['–ü—Ä–æ–≥–Ω–æ–∑ Raw', '–ü—Ä–æ–≥–Ω–æ–∑ Abs_new', '–ü—Ä–æ–≥–Ω–æ–∑ Full']
        selected_forecast_col = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫—É –ø—Ä–æ–≥–Ω–æ–∑–∞",
            options=forecast_columns,
            index=0,
            key="forecast_col_filter"
        )

        # –§–∏–ª—å—Ç—Ä —Å–∫–∏–ª–ª-–≥—Ä—É–ø–ø
        variants = sorted(df_act['skill_variant'].dropna().astype(str).unique())
        selected_variants = st.multiselect(
            "**–ì—Ä—É–ø–ø—ã –Ω–∞–≤—ã–∫–æ–≤**",
            options=variants,
            default=variants,
            help="–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥—Ä—É–ø–ø",
            placeholder="–ü–æ–∏—Å–∫...",
            key="skill_filter",
            format_func=lambda x: f"üéØ {x}"
        )

        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤—ã–±–æ—Ä–∞
        st.write(
            f"<span style='font-size:0.9em; color:#7f8c8d;'>–í—ã–±—Ä–∞–Ω–æ: {len(selected_variants)} –≥—Ä—É–ø–ø</span>",
            unsafe_allow_html=True
        )

        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        st.markdown("<hr style='margin:1.5rem 0; border-color:#eee;'>", unsafe_allow_html=True)

        # –§–∏–ª—å—Ç—Ä –∫–∞–Ω–∞–ª–æ–≤
        selected_channels = st.multiselect(
            "**–ö–∞–Ω–∞–ª—ã –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏**",
            options=list(CHANNEL_MAPPING.keys()),
            default=["–í—Ö–æ–¥—è—â–∏–µ –∑–≤–æ–Ω–∫–∏", "–ß–∞—Ç—ã"],
            format_func=lambda x: {
                "–í—Ö–æ–¥—è—â–∏–µ –∑–≤–æ–Ω–∫–∏": "üìû –í—Ö–æ–¥—è—â–∏–µ –∑–≤–æ–Ω–∫–∏",
                "–û—Ñ—Ñ–ª–∞–π–Ω —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª": "üíª –û—Ñ—Ñ–ª–∞–π–Ω",
                "–ß–∞—Ç—ã": "üí¨ –ß–∞—Ç—ã",
                "–ü–µ—Ä–µ—Ä—ã–≤—ã": "‚òï –ü–µ—Ä–µ—Ä—ã–≤—ã",
                "–û—Ç—Ä–∞–±–æ—Ç–∫–∏-–î–æ–ø —Ä–∞–±–æ—á–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã": "üë®‚Äçüíª –û—Ç—Ä–∞–±–æ—Ç–∫–∞-–î–æ–ø–∫–∞",
                "–û—Ç–ø—É—Å–∫": "üèñÔ∏è –û—Ç–ø—É—Å–∫",
                "–ë–æ–ª—å–Ω–∏—á–Ω—ã–π": "üè• –ë–æ–ª—å–Ω–∏—á–Ω—ã–π"
            }[x],
            key="channel_filter"
        )

        selected_main_acts = [act for channel in selected_channels for act in CHANNEL_MAPPING[channel]]

        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
        if st.button(
                "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ",
                type="primary",
                use_container_width=True,
                help="–ü—Ä–∏–º–µ–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã"
        ):
            st.rerun()

    return {
        'selected_forecast_col': selected_forecast_col,
        'selected_variants': selected_variants,
        'selected_channels': selected_channels,
        'selected_main_acts': selected_main_acts
    }


def filter_by_period(df_filtered, start_dt, end_dt):
    """
    –§–∏–ª—å—Ç—Ä—É–µ—Ç DataFrame –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É –¥–∏–∞–ø–∞–∑–æ–Ω—É.

    Args:
        df_filtered (pd.DataFrame): –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π DataFrame –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        start_dt (datetime): –ù–∞—á–∞–ª–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        end_dt (datetime): –ö–æ–Ω–µ—Ü –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞

    Returns:
        pd.DataFrame: –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —Ä–∞–º–∫–∞—Ö –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    """
    if start_dt is None or end_dt is None:
        return df_filtered
    return df_filtered[
        (df_filtered['start'] < end_dt) & (df_filtered['end'] > start_dt)
        ]

def calculate_plan(df_period, times: List[datetime], is_hourly=True):
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø–ª–∞–Ω –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Å–ª–æ—Ç–∞–º.

    Args:
        df_period (pd.DataFrame): DataFrame –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–∏–æ–¥–∞
        times (list[datetime]): –°–ø–∏—Å–æ–∫ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
        is_hourly (bool): –†–µ–∂–∏–º ‚Äî –ø–æ —á–∞—Å–∞–º (True) –∏–ª–∏ –ø–æ –¥–Ω—è–º (False)

    Returns:
        pd.DataFrame: DataFrame —Å –∫–æ–ª–æ–Ω–∫–æ–π '–ü–ª–∞–Ω' (–≤ —á–∞—Å–∞—Ö)
    """
    plan_list = []
    for t in times:
        if is_hourly:
            start = t
            end = t + pd.Timedelta(minutes=30)
        else:
            start = t
            end = t + pd.Timedelta(days=1)
        plan = calculate_overlap(df_period, start, end)
        plan_list.append({'slot_start': t, '–ü–ª–∞–Ω': plan})
    return pd.DataFrame(plan_list).set_index('slot_start')

def calculate_forecast(df_forecast, times, start_dt=None, end_dt=None, is_hourly=True):
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Å–ª–æ—Ç–∞–º.

    Args:
        df_forecast (pd.DataFrame): DataFrame –ø—Ä–æ–≥–Ω–æ–∑–∞
        times (list[datetime]): –°–ø–∏—Å–æ–∫ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
        start_dt (datetime): –ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞ (–¥–ª—è –¥–Ω–µ–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞)
        end_dt (datetime): –ö–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞ (–¥–ª—è –¥–Ω–µ–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞)
        is_hourly (bool): –†–µ–∂–∏–º ‚Äî –ø–æ —á–∞—Å–∞–º (True) –∏–ª–∏ –ø–æ –¥–Ω—è–º (False)

    Returns:
        pd.DataFrame: DataFrame —Å –∫–æ–ª–æ–Ω–∫–æ–π '–ü—Ä–æ–≥–Ω–æ–∑' (–≤ —á–∞—Å–∞—Ö)
    """
    if df_forecast.empty:
        return pd.DataFrame({'slot_start': times, '–ü—Ä–æ–≥–Ω–æ–∑': [0.0] * len(times)}).set_index('slot_start')

    df_fc = df_forecast.copy()
    df_fc['ts'] = pd.to_datetime(df_fc['–î–∞—Ç–∞'] + ' ' + df_fc['–í—Ä–µ–º—è'])
    if not is_hourly:
        df_fc = df_fc[(df_fc['ts'] >= start_dt) & (df_fc['ts'] < end_dt)]

    forecast_list = []
    for t in times:
        if is_hourly:
            mask = df_fc['ts'] == t
        else:
            mask = (df_fc['ts'] >= t) & (df_fc['ts'] < t + pd.Timedelta(days=1))
        forecast_list.append({'slot_start': t, '–ü—Ä–æ–≥–Ω–æ–∑': df_fc.loc[mask, '–ü—Ä–æ–≥–Ω–æ–∑'].sum()})

    return pd.DataFrame(forecast_list).set_index('slot_start')

def finalize_slot_df(plan_df, forecast_df, year=None, month=None):
    """
    –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –ø–ª–∞–Ω –∏ –ø—Ä–æ–≥–Ω–æ–∑, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç—å.

    Args:
        plan_df (pd.DataFrame): DataFrame —Å –ø–ª–∞–Ω–æ–º
        forecast_df (pd.DataFrame): DataFrame —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º

    Returns:
        pd.DataFrame: –ò—Ç–æ–≥–æ–≤—ã–π DataFrame —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏:
            - 'slot_start' (datetime)
            - '–ü–ª–∞–Ω' (float)
            - '–ü—Ä–æ–≥–Ω–æ–∑' (float)
            - '–†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç—å' (float)
    """
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–æ —Å–ª–æ—Ç–∞–º
    slot_df = pd.concat([plan_df, forecast_df], axis=1).fillna(0)
    slot_df = slot_df.reset_index()
    slot_df['slot_start'] = pd.to_datetime(slot_df['slot_start'])

    # üî• –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≥–æ–¥—É –∏ –º–µ—Å—è—Ü—É, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
    if year is not None and month is not None:
        slot_df = slot_df[
            (slot_df['slot_start'].dt.year == year) &
            (slot_df['slot_start'].dt.month == month)
        ]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ—Ç—É
    if slot_df.empty:
        st.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏.")
        return pd.DataFrame()

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ –¥–∞–Ω–Ω—ã–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    total_plan = slot_df['–ü–ª–∞–Ω'].sum()
    total_forecast = slot_df['–ü—Ä–æ–≥–Ω–æ–∑'].sum()

    # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ 0
    k = total_plan / total_forecast if total_forecast > 0 else 0.0

    slot_df['–†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç—å'] = slot_df['–ü—Ä–æ–≥–Ω–æ–∑'] * k

    return slot_df


def prepare_slot_data(mode, df_filtered, df_forecast, min_date, max_date):
    """
    –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Å–ª–æ—Ç–∞–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.

    Args:
        mode (str): –†–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è ('–ü–æ —á–∞—Å–∞–º' –∏–ª–∏ '–ü–æ –¥–Ω—è–º')
        df_filtered (pd.DataFrame): –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π DataFrame –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        df_forecast (pd.DataFrame): DataFrame –ø—Ä–æ–≥–Ω–æ–∑–∞
        min_date (date): –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–æ—Å—Ç—É–ø–Ω–∞—è –¥–∞—Ç–∞
        max_date (date): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–æ—Å—Ç—É–ø–Ω–∞—è –¥–∞—Ç–∞

    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏:
            - 'slot_df' (pd.DataFrame): –ò—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            - 'selected_date' (date): –í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞
            - 'year' (int): –í—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ–¥
            - 'month' (int): –í—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü
            - 'start_dt' (datetime): –ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞
            - 'end_dt' (datetime): –ö–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞
    """
    selected_date = year = month = None
    start_dt = end_dt = None

    if mode == "–ü–æ —á–∞—Å–∞–º":
        selected_date = st.session_state.selected_date
        start_dt = pd.to_datetime(selected_date)
        end_dt = start_dt + pd.Timedelta(days=1)
    else:
        # –î–ª—è —Ä–µ–∂–∏–º–∞ "–ü–æ –¥–Ω—è–º" start_dt –∏ end_dt –æ—Å—Ç–∞—é—Ç—Å—è None
        start_dt = pd.to_datetime(min_date)
        end_dt = pd.to_datetime(max_date) + pd.Timedelta(days=1)

    # --- üî• –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –ü–û –ü–ï–†–ò–û–î–£ ---
    if start_dt is not None and end_dt is not None:
        df_period = filter_by_period(df_filtered, start_dt, end_dt)
    else:
        df_period = df_filtered.copy()

    # 3. –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ—Ç–æ–≤ –∏ —Ä–∞—Å—á—ë—Ç
    if mode == "–ü–æ —á–∞—Å–∞–º":
        times = pd.date_range(start=start_dt, end=end_dt, freq='30min', inclusive='left').tolist()
        plan_df = calculate_plan(df_period, times, is_hourly=True)
        forecast_df = calculate_forecast(df_forecast, times, is_hourly=True)
    else:
        # –î–ª—è —Ä–µ–∂–∏–º–∞ "–ü–æ –¥–Ω—è–º" –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –æ—Ç min_date –¥–æ max_date
        times = pd.date_range(start=min_date, end=max_date, freq='D', inclusive='left').tolist()
        df_period = df_filtered.copy()  # –ü–æ–ª–Ω—ã–π –ø–µ—Ä–∏–æ–¥

        # --- üî• –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –ü–û –ú–ï–°–Ø–¶–£ ---
        if 'year' in st.session_state and 'month' in st.session_state:
            selected_year = st.session_state.selected_year
            selected_month = st.session_state.selected_month
            df_period = df_period[
                df_period['start'].dt.year == selected_year
                ]
            df_period = df_period[
                df_period['start'].dt.month == selected_month
                ]

        plan_df = calculate_plan(df_period, times, is_hourly=False)
        forecast_df = calculate_forecast(df_forecast, times, start_dt=start_dt, end_dt=end_dt, is_hourly=False)

    # 4. –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç
    slot_df = finalize_slot_df(plan_df, forecast_df)

    return {
        'slot_df': slot_df,
        'selected_date': selected_date if mode == "–ü–æ —á–∞—Å–∞–º" else None,
        'year': year,
        'month': month,
        'start_dt': start_dt,
        'end_dt': end_dt
    }

def render_chart_and_table(slot_df, mode, selected_date=None, year=None, month=None):
    """
    –°—Ç—Ä–æ–∏—Ç –≥—Ä–∞—Ñ–∏–∫ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –Ω–∞ –æ—Å–Ω–æ–≤–µ slot_df
    """
    if slot_df.empty:
        st.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        return

    # --- üî• –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü—É –≤ —Ä–µ–∂–∏–º–µ "–ü–æ –¥–Ω—è–º" ---
    if mode == "–ü–æ –¥–Ω—è–º" and year and month:
        slot_df = slot_df[
            (slot_df['slot_start'].dt.year == year) &
            (slot_df['slot_start'].dt.month == month)
        ]

    # –ï—Å–ª–∏ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã–µ –ø—É—Å—Ç—ã–µ
    if slot_df.empty:
        st.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ.")
        return

    # --- –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ ---
    title = (
        f"–ü–æ—á–∞—Å–æ–≤–æ–π –æ–±–∑–æ—Ä ‚Äî {selected_date}"
        if mode == "–ü–æ —á–∞—Å–∞–º"
        else f"–î–Ω–µ–≤–Ω–æ–π –æ–±–∑–æ—Ä ‚Äî {year}-{month:02d}"
    )
    fig = px.line(
        slot_df,
        x='slot_start',
        y=['–ü–ª–∞–Ω', '–ü—Ä–æ–≥–Ω–æ–∑', '–†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç—å'],
        labels={'slot_start': '–í—Ä–µ–º—è/–î–∞—Ç–∞', 'value': '–ß–µ–ª–æ–≤–µ–∫–æ-—á–∞—Å—ã'},
        title=title,
        color_discrete_map={'–ü–ª–∞–Ω': 'green', '–ü—Ä–æ–≥–Ω–æ–∑': 'red', '–†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç—å': 'orange'},
    )
    fig.update_traces(visible='legendonly', selector=dict(name='–†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç—å'))

    if mode == "–ü–æ —á–∞—Å–∞–º":
        fig.update_xaxes(tickformat='%H:%M', dtick=30 * 60 * 1000)
    else:
        fig.update_xaxes(tickformat='%Y-%m-%d', dtick="D1")

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã Y-–æ—Å–∏ –≤ 0
    max_value = slot_df[['–ü–ª–∞–Ω', '–ü—Ä–æ–≥–Ω–æ–∑', '–†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç—å']].max().max()
    fig.update_layout(yaxis=dict(range=[0, max_value + 1 if max_value > 0 else 1]))

    if slot_df['–ü–ª–∞–Ω'].sum() + slot_df['–ü—Ä–æ–≥–Ω–æ–∑'].sum() == 0:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        st.markdown("- –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤")
        st.markdown("- –ù–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
    else:
        st.plotly_chart(fig, use_container_width=True)

    # --- –¢–∞–±–ª–∏—Ü–∞ –¥–∞–Ω–Ω—ã—Ö ---
    st.subheader("üìä –¢–∞–±–ª–∏—Ü–∞ –¥–∞–Ω–Ω—ã—Ö: –ü–ª–∞–Ω –∏ –ü—Ä–æ–≥–Ω–æ–∑")

    display_df = slot_df[['slot_start', '–ü–ª–∞–Ω', '–ü—Ä–æ–≥–Ω–æ–∑']].copy()
    if mode == "–ü–æ —á–∞—Å–∞–º":
        display_df['–í—Ä–µ–º—è'] = display_df['slot_start'].dt.strftime('%H:%M')
        cols = ['–í—Ä–µ–º—è', '–ü–ª–∞–Ω', '–ü—Ä–æ–≥–Ω–æ–∑']
    else:
        display_df['–î–∞—Ç–∞'] = display_df['slot_start'].dt.strftime('%Y-%m-%d')
        cols = ['–î–∞—Ç–∞', '–ü–ª–∞–Ω', '–ü—Ä–æ–≥–Ω–æ–∑']
    display_df['–î–µ–ª—å—Ç–∞'] = display_df['–ü–ª–∞–Ω'] - display_df['–ü—Ä–æ–≥–Ω–æ–∑']

    # --- –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã ---
    def color_delta(val):
        color = 'green' if val > 0 else 'red' if val < 0 else 'gray'
        return f'color: {color}'

    styled_df = display_df[cols + ['–î–µ–ª—å—Ç–∞']].style \
        .format({'–ü–ª–∞–Ω': '{:.1f}', '–ü—Ä–æ–≥–Ω–æ–∑': '{:.1f}', '–î–µ–ª—å—Ç–∞': '{:+.1f}'}) \
        .map(color_delta, subset='–î–µ–ª—å—Ç–∞') \
        .set_properties(**{'text-align': 'center'}) \
        .set_table_styles([{
        'selector': 'th',
        'props': [('background-color', '#3498db'), ('color', 'white')]
    }])

    st.dataframe(
        styled_df,
        use_container_width=True,
        height=400,
        hide_index=True
    )

def render_export_buttons(slot_df, mode, df_filtered, df_forecast, selected_channels, selected_variants, selected_date=None, year=None, month=None):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Excel.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–µ–∂–∏–º—ã:
    - '–ü–æ —á–∞—Å–∞–º' ‚Üí –∏—Å–ø–æ–ª—å–∑—É–µ—Ç selected_date
    - '–ü–æ –¥–Ω—è–º'  ‚Üí –∏—Å–ø–æ–ª—å–∑—É–µ—Ç year –∏ month
    """
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è "–ü–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º"
    output_df = slot_df.copy()
    output_df['–î–µ–ª—å—Ç–∞'] = output_df['–ü–ª–∞–Ω'] - output_df['–ü—Ä–æ–≥–Ω–æ–∑']
    output_df['–î–∞—Ç–∞'] = output_df['slot_start'].dt.date

    if mode == "–ü–æ —á–∞—Å–∞–º":
        output_df['–í—Ä–µ–º—è'] = output_df['slot_start'].dt.strftime('%H:%M')
        cols_sel = ['–î–∞—Ç–∞', '–í—Ä–µ–º—è', '–ü–ª–∞–Ω', '–ü—Ä–æ–≥–Ω–æ–∑', '–î–µ–ª—å—Ç–∞']
    else:
        cols_sel = ['–î–∞—Ç–∞', '–ü–ª–∞–Ω', '–ü—Ä–æ–≥–Ω–æ–∑', '–î–µ–ª—å—Ç–∞']

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ Excel-—Ñ–∞–π–ª–∞ "–ü–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º"
    buf_sel = io.BytesIO()
    with pd.ExcelWriter(buf_sel, engine='openpyxl') as writer:
        output_df[cols_sel].to_excel(writer, sheet_name='–ò–Ω—Ç–µ—Ä–≤–∞–ª—ã', index=False)
        ws = writer.sheets['–ò–Ω—Ç–µ—Ä–≤–∞–ª—ã']
        for i, col in enumerate(cols_sel, start=1):
            w = max(output_df[col].astype(str).map(len).max(), len(col)) + 2
            ws.column_dimensions[get_column_letter(i)].width = w
    buf_sel.seek(0)

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    timestamp = pd.Timestamp.now().strftime('%Y%m%d_%H%M')
    if mode == "–ü–æ —á–∞—Å–∞–º":
        file_label = f"–æ—Ç—á–µ—Ç_{selected_date}_{timestamp}.xlsx"
    else:
        file_label = f"–æ—Ç—á–µ—Ç_{year}-{month:02d}_{timestamp}.xlsx"

    # –†–µ–Ω–¥–µ—Ä –∫–Ω–æ–ø–æ–∫
    c1, c2 = st.columns(2)
    with c1:
        st.download_button(
            label="‚¨áÔ∏è –ü–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º",
            data=buf_sel,
            file_name=f"–∏–Ω—Ç–µ—Ä–≤–∞–ª—ã_{file_label}",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )

    # --- –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ KPI –∑–∞ –º–µ—Å—è—Ü ---
    if mode == "–ü–æ –¥–Ω—è–º" and year and month:
        with c2:
            with st.spinner("‚è≥ –§–æ—Ä–º–∏—Ä—É–µ–º KPI –∑–∞ –º–µ—Å—è—Ü..."):
                kpi_df = calculate_monthly_kpi(df_filtered, df_forecast, selected_channels, selected_variants, year, month)
                buf_kpi = io.BytesIO()
                with pd.ExcelWriter(buf_kpi, engine='openpyxl') as writer:
                    kpi_df.to_excel(writer, sheet_name='KPI_30–º', index=False)
                    ws_kpi = writer.sheets['KPI_30–º']
                    for i, col in enumerate(kpi_df.columns, start=1):
                        w = max(kpi_df[col].astype(str).map(len).max(), len(col)) + 2
                        ws_kpi.column_dimensions[get_column_letter(i)].width = w
                buf_kpi.seek(0)

                st.download_button(
                    label="‚¨áÔ∏è –ü–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º –∑–∞ –º–µ—Å—è—Ü (30-–º–∏–Ω—É—Ç–Ω—ã–µ —Å–ª–æ—Ç—ã)",
                    data=buf_kpi,
                    file_name=f"KPI_{year}-{month:02d}_{timestamp}.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )

@st.cache_data(hash_funcs={pd.DataFrame: hash_dataframe})
def calculate_monthly_kpi(df_filtered, df_forecast, selected_channels, selected_variants, year, month):
    start_month = pd.Timestamp(year=year, month=month, day=1)
    end_month = start_month + pd.offsets.MonthEnd(1) + pd.Timedelta(days=1)
    slots_month = pd.date_range(start=start_month, end=end_month, freq='30min', inclusive='left')

    df_act_m = df_filtered[(df_filtered['start'] < end_month) & (df_filtered['end'] > start_month)]

    if not df_forecast.empty:
        df_fc_m = df_forecast.copy()
        df_fc_m['ts'] = pd.to_datetime(df_fc_m['–î–∞—Ç–∞'] + ' ' + df_fc_m['–í—Ä–µ–º—è'])
        df_fc_m = df_fc_m[(df_fc_m['ts'] >= start_month) & (df_fc_m['ts'] < end_month)]

        if 'skill_variant' not in df_fc_m.columns:
            df_fc_m['skill_variant'] = '–ù–µ –∑–∞–¥–∞–Ω–æ'
    else:
        df_fc_m = pd.DataFrame(columns=['ts', '–ü—Ä–æ–≥–Ω–æ–∑', '–ö–∞–Ω–∞–ª –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏', 'skill_variant'])

    kpi_data = []

    for channel in selected_channels:
        df_act_channel = df_act_m[df_act_m['main_act'].isin(CHANNEL_MAPPING[channel])]

        for skill_variant in selected_variants:
            # üîÅ –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –≥—Ä—É–ø–ø—É –∏–∑ VARIANT_TO_SYSTEM
            system_group = VARIANT_TO_SYSTEM.get(skill_variant, skill_variant)

            # –§–∏–ª—å—Ç—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π skill_variant
            df_act_skill = df_act_channel[df_act_channel['skill_variant'] == skill_variant]

            # üîÅ –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ —Å–∏—Å—Ç–µ–º–Ω–æ–π –≥—Ä—É–ø–ø–µ
            df_fc_channel = df_fc_m[
                (df_fc_m['–ö–∞–Ω–∞–ª –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏'] == channel) &
                (df_fc_m['system_group'] == system_group)
            ]

            for ts in slots_month:
                plan = calculate_overlap(df_act_skill, ts, ts + pd.Timedelta(minutes=30))
                forecast = df_fc_channel[df_fc_channel['ts'] == ts]['–ü—Ä–æ–≥–Ω–æ–∑'].sum()
                kpi_data.append({
                    '–î–∞—Ç–∞': ts.date(),
                    '–í—Ä–µ–º—è': ts.time(),
                    '–ö–∞–Ω–∞–ª –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏': channel,
                    '–°–∫–∏–ª–ª –≥—Ä—É–ø–ø–∞': skill_variant,
                    '–ü–ª–∞–Ω': plan,
                    '–ü—Ä–æ–≥–Ω–æ–∑': forecast
                })

    kpi_df = pd.DataFrame(kpi_data)
    kpi_df['–î–µ–ª—å—Ç–∞'] = kpi_df['–ü–ª–∞–Ω'] - kpi_df['–ü—Ä–æ–≥–Ω–æ–∑']
    return kpi_df

@st.cache_data
def load_activity(file) -> pd.DataFrame:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ñ–∞–π–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.

    Args:
        file (io.BytesIO): –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π XLSX-—Ñ–∞–π–ª

    Returns:
        pd.DataFrame: –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π DataFrame –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    """
    try:
        df = pd.read_excel(file, dtype={
            'activity_date': str,
            'start_time': str,
            'end_time': str,
            'main_act': str,
            '–°–∫–∏–ª–ª-–≥—Ä—É–ø–ø–∞': str
        })

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        required_columns = ['activity_date', 'start_time', 'end_time', '–°–∫–∏–ª–ª-–≥—Ä—É–ø–ø–∞', 'main_act']
        if not all(col in df.columns for col in required_columns):
            st.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏: {set(required_columns) - set(df.columns)}")
            return pd.DataFrame()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –≤ skill_variant –∏ –º–∞–ø–∏–º –≤ system_group
        df['skill_variant'] = df['–°–∫–∏–ª–ª-–≥—Ä—É–ø–ø–∞']
        df['system_group'] = df['skill_variant'] \
            .map(VARIANT_TO_SYSTEM) \
            .fillna(df['skill_variant'])
            # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫
        df['start'] = pd.to_datetime(
            df['activity_date'] + ' ' + df['start_time'],
            errors='coerce'
        )
        df['end'] = pd.to_datetime(
            df['activity_date'] + ' ' + df['end_time'],
            errors='coerce'
        )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–æ–∫ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        if df[['start', 'end']].isnull().any().any():
            st.error("–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
            return pd.DataFrame()

        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å
        df.loc[df['end'] <= df['start'], 'end'] += pd.Timedelta(days=1)

        return df.dropna(subset=['start', 'end'])

    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {str(e)}")
        return pd.DataFrame()


@st.cache_data
def load_forecast(file) -> pd.DataFrame:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ñ–∞–π–ª –ø—Ä–æ–≥–Ω–æ–∑–∞.

    Args:
        file (io.BytesIO | list[io.BytesIO]): –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π(–µ) XLSX-—Ñ–∞–π–ª(—ã)

    Returns:
        pd.DataFrame: –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π DataFrame –ø—Ä–æ–≥–Ω–æ–∑–∞
    """
    if file is None:
        return pd.DataFrame()

    if isinstance(file, list):
        if not file:  # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π DataFrame
            return pd.DataFrame()

        dfs = []
        for f in file:
            df = load_forecast_single(f)
            if not df.empty:
                dfs.append(df)
        return pd.concat(dfs, ignore_index=True) if dfs else pd.DataFrame()

    return load_forecast_single(file)


def load_forecast_single(file) -> pd.DataFrame:
    """
    –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞
    """
    try:
        df = pd.read_excel(file, dtype={
            '–î–∞—Ç–∞': str,
            '–í—Ä–µ–º—è': str,
            '–°–∫–∏–ª–ª –≥—Ä—É–ø–ø–∞': str,
            '–ö–∞–Ω–∞–ª –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏': str,
            '–ü—Ä–æ–≥–Ω–æ–∑ Raw': float,
            '–ü—Ä–æ–≥–Ω–æ–∑ Abs_new': float,
            '–ü—Ä–æ–≥–Ω–æ–∑ Full': float
        }).rename(columns={'–°–∫–∏–ª–ª –≥—Ä—É–ø–ø–∞': 'skill_variant'})

        required = ['skill_variant', '–ö–∞–Ω–∞–ª –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏', '–ü—Ä–æ–≥–Ω–æ–∑ Raw', '–ü—Ä–æ–≥–Ω–æ–∑ Abs_new', '–ü—Ä–æ–≥–Ω–æ–∑ Full']
        if not all(col in df.columns for col in required):
            st.error(f"–í –ø—Ä–æ–≥–Ω–æ–∑–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏: {set(required) - set(df.columns)}")
            return pd.DataFrame()

        df['system_group'] = df['skill_variant'] \
            .map(VARIANT_TO_SYSTEM) \
            .fillna(df['skill_variant'])

        return df

    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞: {str(e)}")
        return pd.DataFrame()


def calculate_overlap(df_activity, slot_start, slot_end):
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å –∑–∞–¥–∞–Ω–Ω—ã–º —Å–ª–æ—Ç–æ–º.

    Args:
        df_activity (pd.DataFrame): DataFrame –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        slot_start (datetime): –ù–∞—á–∞–ª–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞
        slot_end (datetime): –ö–æ–Ω–µ—Ü –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞

    Returns:
        float: –í—Ä–µ–º—è –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –≤ —á–∞—Å–∞—Ö
    """
    df = df_activity.copy()
    mask = (df['start'] < slot_end) & (df['end'] > slot_start)
    filtered = df[mask].copy()

    if filtered.empty:
        return 0.0

    filtered['overlap_start'] = filtered[['start']].apply(lambda x: max(x['start'], slot_start), axis=1)
    filtered['overlap_end'] = filtered[['end']].apply(lambda x: min(x['end'], slot_end), axis=1)

    total_seconds = (filtered['overlap_end'] - filtered['overlap_start']).dt.total_seconds().sum()
    return total_seconds / 3600

def load_and_validate_files():
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Streamlit.

    –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞–≥—Ä—É–∑–∏—Ç—å XLSX-—Ñ–∞–π–ª—ã —á–µ—Ä–µ–∑ –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–≥—Ä—É–∂–µ–Ω –ª–∏ —Ñ–∞–π–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é.

    Returns:
        tuple[pd.DataFrame, io.BytesIO, io.BytesIO] | tuple[None, None, None]:
            –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ –∏–∑:
            - DataFrame –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (pd.DataFrame)
            - activity_file (io.BytesIO): —Ñ–∞–π–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            - forecast_file (io.BytesIO): —Ñ–∞–π–ª –ø—Ä–æ–≥–Ω–æ–∑–∞
            –ï—Å–ª–∏ —Ñ–∞–π–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (None, None, None)
    """
    with st.sidebar.expander("‚öôÔ∏è **–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö**", expanded=True):
        activity_files = st.file_uploader(
            "–§–∞–π–ª—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ)",
            type="xlsx",
            help="–ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ XLSX —Ñ–∞–π–ª–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
            key="activity_uploader",
            accept_multiple_files=True
        )

        forecast_files = st.file_uploader(
            "–§–∞–π–ª—ã –ø—Ä–æ–≥–Ω–æ–∑–∞ (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ)",
            type="xlsx",
            help="–ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ XLSX —Ñ–∞–π–ª–æ–≤ —Å –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏",
            key="forecast_uploader",
            accept_multiple_files=True
        )

        if activity_files:
            for i, f in enumerate(activity_files):
                st.success(f"‚úÖ –§–∞–π–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ {i + 1}: {f.name}")
        if forecast_files:
            for i, f in enumerate(forecast_files):
                st.success(f"‚úÖ –§–∞–π–ª –ø—Ä–æ–≥–Ω–æ–∑–∞ {i + 1}: {f.name}")

    if not activity_files:
        st.info("""
              ## üöÄ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
              1. –°–∫–∞—á–∞–π—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑ TWFM, –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤—å—Ç–µ –≤—ã–≥—Ä—É–∑–∫—É —Å–∫–∏–ª–ª-–≥—Ä—É–ø–ø—ã –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª(—ã) –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å. 
              2. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª(—ã) –ø—Ä–æ–≥–Ω–æ–∑–∞
              3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
              4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
              """)
        return None, None, None

    with st.spinner('üåÄ **–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...**'):
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        dfs_act = []
        for file in activity_files:
            df = load_activity(file)
            if not df.empty:
                dfs_act.append(df)
            else:
                st.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {file.name}")

        if not dfs_act:
            st.error("‚ö†Ô∏è –ù–∏ –æ–¥–∏–Ω —Ñ–∞–π–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
            return None, None, None

        df_act_combined = pd.concat(dfs_act, ignore_index=True)

    return df_act_combined, activity_files, forecast_files

def apply_filters_and_process(df_act, filters, forecast_file):
    """
    –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã –∫ –¥–∞–Ω–Ω—ã–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑.

    –§–∏–ª—å—Ç—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–∞–º –∏ –∫–∞–Ω–∞–ª–∞–º.
    –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫–∞–Ω–∞–ª–∞–º –Ω–µ—Ç ‚Äî –≤—ã–≤–æ–¥–∏—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ.
    –ï—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã –Ω–µ –¥–∞—é—Ç –¥–∞–Ω–Ω—ã—Ö ‚Äî –≤—ã–≤–æ–¥–∏—Ç –æ—à–∏–±–∫—É.

    Args:
        df_act (pd.DataFrame): DataFrame –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        filters (dict): –°–ª–æ–≤–∞—Ä—å —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–π –∏–∑ `render_filters`
        forecast_file (io.BytesIO): —Ñ–∞–π–ª –ø—Ä–æ–≥–Ω–æ–∑–∞

    Returns:
        tuple[pd.DataFrame, pd.DataFrame] | tuple[None, None]:
            - –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π DataFrame –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            - DataFrame –ø—Ä–æ–≥–Ω–æ–∑–∞
            –ï—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã –Ω–µ –¥–∞—é—Ç –¥–∞–Ω–Ω—ã—Ö ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (None, None)
    """
    selected_variants = filters['selected_variants']
    selected_channels = filters['selected_channels']
    selected_main_acts = filters['selected_main_acts']
    selected_forecast_col = filters['selected_forecast_col']

    selected_system_groups = list({VARIANT_TO_SYSTEM.get(v, v) for v in selected_variants})
    df_filtered = filter_data(df_act, selected_variants, selected_main_acts)
    df_forecast = process_forecast(forecast_file, selected_system_groups, selected_channels, selected_forecast_col)

    if df_filtered.empty and selected_channels:
        st.warning("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫–∞–Ω–∞–ª–∞–º –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏.")
        st.markdown("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–∞–Ω–∞–ª—ã –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞.")

    if df_filtered.empty:
        reason = "–ø—Ä–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–∞—Ö" if selected_variants or selected_channels else "–≤ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
        st.error(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è {reason}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        st.markdown("- –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–∫–∏–ª–ª-–≥—Ä—É–ø–ø—ã")
        st.markdown("- –í—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏")
        return None, None

    return df_filtered, df_forecast


def get_period_params(df_filtered):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞: —Ä–µ–∂–∏–º, –¥–∞—Ç—É/–º–µ—Å—è—Ü, –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã.

    Args:
        df_filtered (pd.DataFrame): –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π DataFrame –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

    Returns:
        dict: {
            'mode': str,                     # '–ü–æ —á–∞—Å–∞–º' / '–ü–æ –¥–Ω—è–º'
            'selected_date': date,           # –≤—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ (–µ—Å–ª–∏ —Ä–µ–∂–∏–º '–ü–æ —á–∞—Å–∞–º')
            'year': int,                     # –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ–¥ (–µ—Å–ª–∏ —Ä–µ–∂–∏–º '–ü–æ –¥–Ω—è–º')
            'month': int,                    # –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü (–µ—Å–ª–∏ —Ä–µ–∂–∏–º '–ü–æ –¥–Ω—è–º')
            'start_dt': pd.Timestamp,        # –Ω–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞
            'end_dt': pd.Timestamp,          # –∫–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞
            'min_date': date,                # –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–æ—Å—Ç—É–ø–Ω–∞—è –¥–∞—Ç–∞
            'max_date': date,                # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–æ—Å—Ç—É–ø–Ω–∞—è –¥–∞—Ç–∞
        }
    """
    if df_filtered.empty:
        st.error("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç—ã –∏ —Ä–µ–∂–∏–º–∞.")
        return {}

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –æ–¥–∏–Ω —Ä–∞–∑
    min_date = df_filtered['start'].min().date()
    max_date = df_filtered['start'].max().date()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º session_state, –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω–æ
    if 'selected_date' not in st.session_state:
        st.session_state.selected_date = min_date

    if 'selected_year' not in st.session_state:
        st.session_state.selected_year = min_date.year

    if 'selected_month' not in st.session_state:
        st.session_state.selected_month = min_date.month

    # –†–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    mode = st.sidebar.radio("–†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞", ["–ü–æ —á–∞—Å–∞–º", "–ü–æ –¥–Ω—è–º"])

    selected_date = year = month = None
    start_dt = end_dt = None

    if mode == "–ü–æ —á–∞—Å–∞–º":
        current_date = st.session_state.selected_date

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É, –µ—Å–ª–∏ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        if current_date < min_date:
            current_date = min_date
            st.session_state.selected_date = current_date
            st.warning("‚ö†Ô∏è –í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –¥–æ –Ω–∞—á–∞–ª–∞ –¥–∞–Ω–Ω—ã—Ö. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞.")
        elif current_date > max_date:
            current_date = max_date
            st.session_state.selected_date = current_date
            st.warning("‚ö†Ô∏è –í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞.")

        selected_date = st.sidebar.date_input(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É",
            value=current_date,
            min_value=min_date,
            max_value=max_date,
            key='period_selection_date_input'
        )

        if selected_date != st.session_state.selected_date:
            st.session_state.selected_date = selected_date
            st.rerun()

        start_dt = pd.to_datetime(selected_date)
        end_dt = start_dt + pd.Timedelta(days=1)

    else:
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–¥—ã
        available_years = sorted(df_filtered['start'].dt.year.unique())

        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Å—è—Ü—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ–¥–∞
        selected_year = st.session_state.selected_year
        available_months = sorted(
            df_filtered[df_filtered['start'].dt.year == selected_year]['start'].dt.month.unique()
        )

        # –í—ã–±–æ—Ä –≥–æ–¥–∞
        year = st.sidebar.selectbox(
            "–ì–æ–¥",
            options=available_years,
            index=available_years.index(selected_year) if selected_year in available_years else 0,
            key='period_selection_year'
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Å—è—Ü—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ –≥–æ–¥–∞
        available_months = sorted(
            df_filtered[df_filtered['start'].dt.year == year]['start'].dt.month.unique()
        )

        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –Ω–µ –≤ —Å–ø–∏—Å–∫–µ ‚Äî –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π
        selected_month = st.session_state.selected_month
        if selected_month not in available_months:
            selected_month = available_months[0]

        # –í—ã–±–æ—Ä –º–µ—Å—è—Ü–∞
        month = st.sidebar.selectbox(
            "–ú–µ—Å—è—Ü",
            options=available_months,
            index=available_months.index(selected_month),
            key='period_selection_month'
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ session_state
        st.session_state.selected_year = year
        st.session_state.selected_month = month

        start_dt = pd.Timestamp(year=year, month=month, day=1)
        end_dt = (start_dt + pd.offsets.MonthEnd(1)) + pd.Timedelta(days=1)

    return {
        'mode': mode,
        'selected_date': selected_date,
        'year': year,
        'month': month,
        'start_dt': start_dt,
        'end_dt': end_dt,
        'min_date': min_date,
        'max_date': max_date
    }

def render_results(slot_df, mode, selected_date, year, month, df_filtered, df_forecast, selected_channels, selected_variants):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ (–ø–æ —á–∞—Å–∞–º –∏–ª–∏ –ø–æ –¥–Ω—è–º).
    """
    if mode == "–ü–æ —á–∞—Å–∞–º":
        if selected_date is not None and not slot_df.empty:
            render_chart_and_table(slot_df, mode, selected_date=selected_date)
            render_export_buttons(slot_df, mode, df_filtered, df_forecast, selected_channels, selected_variants, selected_date=selected_date)
        else:
            st.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç–µ.")
    else:
        if year is not None and month is not None and not slot_df.empty:
            render_chart_and_table(slot_df, mode, year=year, month=month)
            render_export_buttons(slot_df, mode, df_filtered, df_forecast, selected_channels, selected_variants, year=year, month=month)
        else:
            st.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ.")

def configure_page():
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã Streamlit.
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–∞–∫–µ—Ç, –∑–∞–≥–æ–ª–æ–≤–æ–∫, –∏–∫–æ–Ω–∫—É –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏.
    """
    st.set_page_config(
        layout="wide",
        page_title="–ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
        page_icon="üìä",
        initial_sidebar_state="expanded"
    )


def run_streamlit():
    configure_page()
    inject_custom_css()
    st.title("üìà –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ–≥–Ω–æ–∑–∞")

    # 1. –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤
    result = load_and_validate_files()
    df_act_combined, activity_file, forecast_file = result

    if df_act_combined is None:
        return

    # 2. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    filters = render_filters(df_act_combined)
    selected_channels = filters['selected_channels']
    selected_variants = filters['selected_variants']
    selected_main_acts = filters['selected_main_acts']
    selected_forecast_col = filters['selected_forecast_col']

    df_filtered, df_forecast = apply_filters_and_process(df_act_combined, filters, forecast_file)
    if df_filtered is None:
        return

    # 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –∏ —Ä–µ–∂–∏–º–∞
    period_data = get_period_params(df_filtered)
    if not period_data:
        return

    mode = period_data['mode']
    selected_date = period_data['selected_date']
    year = period_data['year']
    month = period_data['month']
    start_dt = period_data['start_dt']
    end_dt = period_data['end_dt']

    # 4. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    data = prepare_slot_data(
        mode,
        df_filtered,
        df_forecast,
        period_data['min_date'],
        period_data['max_date']
    )
    slot_df = data['slot_df']

    # 5. –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∏ —ç–∫—Å–ø–æ—Ä—Ç
    render_results(
        slot_df, mode, selected_date, year, month,
        df_filtered, df_forecast,
        selected_channels, selected_variants
    )


if __name__ == "__main__":
    run_streamlit()
